name: Arduino CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  compile:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        board:
          - arduino:samd:mkrwifi1010
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Arduino CLI
      uses: arduino/setup-arduino-cli@v1
      
    - name: Install Arduino SAMD core
      run: |
        arduino-cli core update-index
        arduino-cli core install arduino:samd
        
    - name: Install required libraries
      run: |
        # PubSubClient - Librairie MQTT
        arduino-cli lib install "PubSubClient"
        
        # WiFiNINA - DÃ©jÃ  incluse avec le core SAMD mais on s'assure qu'elle est Ã  jour
        arduino-cli lib install "WiFiNINA"
        
        # RTCZero - DÃ©jÃ  incluse avec le core SAMD mais on s'assure qu'elle est Ã  jour  
        arduino-cli lib install "RTCZero"
        
        # WiFiUdp fait partie de WiFiNINA, pas besoin d'installation sÃ©parÃ©e
        
        # Afficher les librairies installÃ©es pour vÃ©rification
        arduino-cli lib list
        
    - name: Create arduino_secrets.h from example
      run: |
        cp arduino_secrets.h.example arduino_secrets.h
        
    - name: Verify library dependencies
      run: |
        echo "VÃ©rification des librairies installÃ©es..."
        echo "" 
        
        # Afficher toutes les librairies installÃ©es
        echo "=== Librairies installÃ©es ==="
        arduino-cli lib list
        echo ""
        
        # VÃ©rifier PubSubClient
        if arduino-cli lib list | grep -q "PubSubClient"; then
          VERSION=$(arduino-cli lib list | grep "PubSubClient" | awk '{print $2}')
          echo "âœ“ PubSubClient installÃ©e (version: $VERSION)"
        else
          echo "âœ— PubSubClient manquante"
          exit 1
        fi
        
        # VÃ©rifier WiFiNINA
        if arduino-cli lib list | grep -q "WiFiNINA"; then
          VERSION=$(arduino-cli lib list | grep "WiFiNINA" | awk '{print $2}')
          echo "âœ“ WiFiNINA installÃ©e (version: $VERSION)"
        else
          echo "âœ— WiFiNINA manquante"
          exit 1
        fi
        
        # VÃ©rifier RTCZero
        if arduino-cli lib list | grep -q "RTCZero"; then
          VERSION=$(arduino-cli lib list | grep "RTCZero" | awk '{print $2}')
          echo "âœ“ RTCZero installÃ©e (version: $VERSION)"
        else
          echo "âœ— RTCZero manquante"
          exit 1
        fi
        
        echo ""
        echo "ðŸŽ‰ Toutes les librairies requises sont installÃ©es!"
        
    - name: Compile sketch
      run: |
        arduino-cli compile --fqbn ${{ matrix.board }} Arduino-mDNS-UDP.ino
        
  lint-markdown:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Lint Markdown files
      uses: DavidAnson/markdownlint-cli2-action@v16
      with:
        globs: '**/*.md'
        
  check-formatting:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check Arduino code formatting
      run: |
        # Simple check for basic formatting issues
        if grep -r "	" *.ino *.cpp *.h 2>/dev/null; then
          echo "Error: Found tab characters. Please use spaces for indentation."
          exit 1
        fi
        echo "Code formatting check passed"
