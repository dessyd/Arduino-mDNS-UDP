# Makefile pour Arduino mDNS MQTT Client - Production
# Facilite les op√©rations courantes de d√©ploiement et maintenance

# Configuration
FQBN = arduino:samd:mkrwifi1010
PORT = /dev/ttyACM0
PROJECT = Arduino-mDNS-UDP
SKETCH = $(PROJECT).ino
CONFIG_FILE = config.h
SECRETS_FILE = arduino_secrets.h

# Couleurs pour affichage
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

.PHONY: help setup compile upload deploy test clean validate monitor production debug

# Affichage de l'aide par d√©faut
help:
	@echo "$(GREEN)Arduino mDNS MQTT Client - Production$(NC)"
	@echo "========================================"
	@echo ""
	@echo "Commandes disponibles:"
	@echo ""
	@echo "  $(YELLOW)setup$(NC)      - Configuration initiale (secrets, d√©pendances)"
	@echo "  $(YELLOW)compile$(NC)    - Compilation du sketch"
	@echo "  $(YELLOW)upload$(NC)     - Upload vers Arduino (compile + upload)"
	@echo "  $(YELLOW)deploy$(NC)     - D√©ploiement production complet"
	@echo "  $(YELLOW)test$(NC)       - Tests et validation"
	@echo "  $(YELLOW)monitor$(NC)    - Monitoring s√©rie"
	@echo "  $(YELLOW)validate$(NC)   - Validation production compl√®te"
	@echo "  $(YELLOW)clean$(NC)      - Nettoyage fichiers temporaires"
	@echo ""
	@echo "  $(YELLOW)production$(NC) - Basculer en mode production"
	@echo "  $(YELLOW)debug$(NC)      - Basculer en mode debug"
	@echo ""
	@echo "Exemples:"
	@echo "  make setup                    # Configuration initiale"
	@echo "  make deploy PORT=/dev/ttyUSB0 # D√©ploiement sur port sp√©cifique"
	@echo "  make validate                 # Validation compl√®te"

# Configuration initiale
setup:
	@echo "$(GREEN)üîß Configuration initiale...$(NC)"
	@if [ ! -f "$(SECRETS_FILE)" ]; then \
		echo "Cr√©ation du fichier de secrets..."; \
		cp $(SECRETS_FILE).example $(SECRETS_FILE); \
		echo "$(YELLOW)‚ö†Ô∏è √âditez $(SECRETS_FILE) avec vos param√®tres WiFi$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ Fichier de secrets existant$(NC)"; \
	fi
	@echo "V√©rification des d√©pendances..."
	@command -v arduino-cli >/dev/null 2>&1 || { \
		echo "$(RED)‚ùå arduino-cli non install√©$(NC)"; \
		echo "Installation: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh"; \
		exit 1; \
	}
	@echo "$(GREEN)‚úÖ Configuration termin√©e$(NC)"

# V√©rification de la configuration
check-config:
	@echo "$(GREEN)üîç V√©rification configuration...$(NC)"
	@if [ ! -f "$(SECRETS_FILE)" ]; then \
		echo "$(RED)‚ùå Fichier $(SECRETS_FILE) manquant$(NC)"; \
		echo "Lancez: make setup"; \
		exit 1; \
	fi
	@if grep -q "VotreNom" $(SECRETS_FILE); then \
		echo "$(RED)‚ùå Fichier $(SECRETS_FILE) contient des exemples$(NC)"; \
		echo "√âditez le fichier avec vos vrais param√®tres"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Configuration valid√©e$(NC)"

# Compilation
compile: check-config
	@echo "$(GREEN)üî® Compilation...$(NC)"
	arduino-cli compile --fqbn $(FQBN) $(SKETCH)
	@echo "$(GREEN)‚úÖ Compilation termin√©e$(NC)"

# Upload
upload: compile
	@echo "$(GREEN)üì§ Upload vers Arduino...$(NC)"
	@if [ ! -e "$(PORT)" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è Port $(PORT) non trouv√©, d√©tection automatique...$(NC)"; \
		PORT_AUTO=$$(arduino-cli board list | grep -E "(Arduino|MKR)" | awk '{print $$1}' | head -1); \
		if [ -n "$$PORT_AUTO" ]; then \
			echo "$(GREEN)‚úÖ Arduino d√©tect√© sur $$PORT_AUTO$(NC)"; \
			arduino-cli upload -p $$PORT_AUTO --fqbn $(FQBN) $(SKETCH) --verify; \
		else \
			echo "$(RED)‚ùå Aucun Arduino d√©tect√©$(NC)"; \
			exit 1; \
		fi \
	else \
		arduino-cli upload -p $(PORT) --fqbn $(FQBN) $(SKETCH) --verify; \
	fi
	@echo "$(GREEN)‚úÖ Upload termin√©$(NC)"

# D√©ploiement production complet
deploy:
	@echo "$(GREEN)üöÄ D√©ploiement production...$(NC)"
	@chmod +x deploy_production.sh
	./deploy_production.sh
	@echo "$(GREEN)‚úÖ D√©ploiement termin√©$(NC)"

# Tests rapides
test:
	@echo "$(GREEN)üß™ Tests rapides...$(NC)"
	@echo "Test de connectivit√© r√©seau..."
	@ping -c 1 8.8.8.8 >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Internet OK$(NC)" || echo "$(YELLOW)‚ö†Ô∏è Pas d'Internet$(NC)"
	@echo "Test mDNS..."
	@command -v avahi-browse >/dev/null 2>&1 && { \
		timeout 5 avahi-browse -t _mqtt._tcp --resolve --parsable 2>/dev/null | head -1 | grep -q "=" && \
		echo "$(GREEN)‚úÖ Services MQTT d√©tect√©s$(NC)" || echo "$(YELLOW)‚ö†Ô∏è Aucun service MQTT$(NC)"; \
	} || echo "$(YELLOW)‚ö†Ô∏è avahi-browse non disponible$(NC)"

# Validation production compl√®te
validate:
	@echo "$(GREEN)üîç Validation production...$(NC)"
	@if [ -f "production_validation.py" ]; then \
		python3 production_validation.py --monitor-time 60; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Script de validation non trouv√©$(NC)"; \
		make test; \
	fi

# Monitoring s√©rie
monitor:
	@echo "$(GREEN)üì° Monitoring s√©rie (Ctrl+C pour arr√™ter)...$(NC)"
	@PORT_USED=$(PORT); \
	if [ ! -e "$$PORT_USED" ]; then \
		PORT_USED=$$(arduino-cli board list | grep -E "(Arduino|MKR)" | awk '{print $$1}' | head -1); \
	fi; \
	if [ -n "$$PORT_USED" ]; then \
		echo "Monitoring sur $$PORT_USED..."; \
		arduino-cli monitor -p $$PORT_USED -c baudrate=9600; \
	else \
		echo "$(RED)‚ùå Aucun port Arduino d√©tect√©$(NC)"; \
	fi

# Nettoyage
clean:
	@echo "$(GREEN)üßπ Nettoyage...$(NC)"
	@rm -f *.backup
	@rm -rf backup_*
	@rm -f arduino_debug.log
	@rm -f *.tmp
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

# Basculer en mode production
production:
	@echo "$(GREEN)üè≠ Basculement mode production...$(NC)"
	@git checkout main 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è Pas de repository git$(NC)"
	@if [ -f "config-production.h" ]; then \
		cp config-production.h config.h; \
		echo "$(GREEN)‚úÖ Configuration production activ√©e$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Fichier config-production.h non trouv√©$(NC)"; \
	fi
	@grep "DEBUG false" config.h && echo "$(GREEN)‚úÖ DEBUG d√©sactiv√©$(NC)" || echo "$(RED)‚ùå DEBUG encore actif$(NC)"

# Basculer en mode debug
debug:
	@echo "$(GREEN)üêõ Basculement mode debug...$(NC)"
	@git checkout Debug 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è Pas de branche Debug$(NC)"
	@if grep -q "DEBUG false" config.h; then \
		sed -i.backup 's/DEBUG false/DEBUG true/g' config.h; \
		echo "$(GREEN)‚úÖ DEBUG activ√©$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ DEBUG d√©j√† actif$(NC)"; \
	fi

# Informations syst√®me
info:
	@echo "$(GREEN)üìã Informations syst√®me$(NC)"
	@echo "=================="
	@echo "Projet: $(PROJECT)"
	@echo "Port: $(PORT)"
	@echo "FQBN: $(FQBN)"
	@echo "Arduino CLI: $$(arduino-cli version 2>/dev/null || echo 'Non install√©')"
	@echo "Branche Git: $$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo 'Inconnue')"
	@echo "Configuration DEBUG: $$(grep 'DEBUG ' config.h | grep -o 'true\|false' || echo 'Non d√©fini')"
	@echo "Derni√®re compilation: $$(stat -c %y build/ 2>/dev/null | cut -d. -f1 || echo 'Jamais')"

# Installation des d√©pendances
install-deps:
	@echo "$(GREEN)üì¶ Installation des d√©pendances...$(NC)"
	@echo "Installation arduino-cli..."
	@curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
	@echo "Configuration arduino-cli..."
	@arduino-cli config init
	@arduino-cli core update-index
	@arduino-cli core install arduino:samd
	@echo "$(GREEN)‚úÖ D√©pendances install√©es$(NC)"

# Affichage des logs r√©cents
logs:
	@echo "$(GREEN)üìÑ Logs r√©cents$(NC)"
	@if [ -f "arduino_production.log" ]; then \
		echo "=== Logs production (10 derni√®res lignes) ==="; \
		tail -10 arduino_production.log; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Pas de logs production$(NC)"; \
	fi

# Surveillance MQTT en arri√®re-plan
mqtt-monitor:
	@echo "$(GREEN)üì° D√©marrage surveillance MQTT...$(NC)"
	@if command -v mosquitto_sub >/dev/null 2>&1; then \
		nohup mosquitto_sub -h localhost -t "/arduino" -v >> arduino_production.log 2>&1 & \
		echo $$! > mqtt_monitor.pid; \
		echo "$(GREEN)‚úÖ Surveillance d√©marr√©e (PID: $$(cat mqtt_monitor.pid))$(NC)"; \
		echo "Arr√™t: make mqtt-stop"; \
	else \
		echo "$(RED)‚ùå mosquitto_sub non disponible$(NC)"; \
	fi

# Arr√™t surveillance MQTT
mqtt-stop:
	@if [ -f "mqtt_monitor.pid" ]; then \
		kill $$(cat mqtt_monitor.pid) 2>/dev/null || true; \
		rm -f mqtt_monitor.pid; \
		echo "$(GREEN)‚úÖ Surveillance MQTT arr√™t√©e$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Aucune surveillance active$(NC)"; \
	fi