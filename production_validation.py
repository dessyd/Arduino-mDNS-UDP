#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de Validation Production - Arduino mDNS MQTT Client
V√©rifie le bon fonctionnement du syst√®me en production
"""

import time
import sys
import subprocess
import socket
import argparse
from datetime import datetime
import json
import signal
import logging
from typing import Dict, List, Optional, Tuple

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

class Colors:
    """Codes couleur ANSI pour l'affichage console"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

class ProductionValidator:
    """Classe principale pour la validation de production"""
    
    def __init__(self, mqtt_broker: str = None, mqtt_topic: str = "/arduino"):
        self.mqtt_broker = mqtt_broker
        self.mqtt_topic = mqtt_topic
        self.results = {}
        self.start_time = time.time()
        
    def print_header(self):
        """Affiche l'en-t√™te du script"""
        print(f"{Colors.BLUE}{Colors.BOLD}")
        print("=" * 60)
        print("  VALIDATION PRODUCTION - Arduino mDNS MQTT Client")
        print("=" * 60)
        print(f"{Colors.END}")
        print(f"D√©marrage: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
    
    def test_network_connectivity(self) -> bool:
        """Test de connectivit√© r√©seau de base"""
        print(f"{Colors.CYAN}üåê Test de connectivit√© r√©seau...{Colors.END}")
        
        tests = [
            ("Gateway local", self.get_gateway_ip()),
            ("DNS Google", "8.8.8.8"),
            ("Internet", "google.com")
        ]
        
        all_passed = True
        for name, target in tests:
            if target:
                success, latency = self.ping_test(target)
                status = f"{Colors.GREEN}‚úÖ{Colors.END}" if success else f"{Colors.RED}‚ùå{Colors.END}"
                latency_str = f"({latency:.1f}ms)" if latency else ""
                print(f"  {status} {name}: {target} {latency_str}")
                
                if not success:
                    all_passed = False
            else:
                print(f"  {Colors.YELLOW}‚ö†Ô∏è{Colors.END} {name}: Non d√©tect√©")
        
        self.results['network'] = all_passed
        return all_passed
    
    def test_mdns_services(self) -> bool:
        """Test de d√©couverte des services mDNS"""
        print(f"{Colors.CYAN}üîç Test de d√©couverte mDNS...{Colors.END}")
        
        try:
            # Utiliser avahi-browse pour chercher les services MQTT
            result = subprocess.run(
                ['avahi-browse', '-t', '_mqtt._tcp', '--resolve', '--parsable'],
                capture_output=True, text=True, timeout=10
            )
            
            if result.returncode == 0 and result.stdout:
                services = []
                for line in result.stdout.strip().split('\n'):
                    if line.startswith('=') and 'IPv4' in line:
                        parts = line.split(';')
                        if len(parts) >= 8:
                            name = parts[3]
                            hostname = parts[6]
                            address = parts[7]
                            port = parts[8]
                            services.append((name, hostname, address, port))
                
                if services:
                    print(f"  {Colors.GREEN}‚úÖ{Colors.END} Services MQTT d√©tect√©s:")
                    for name, hostname, address, port in services:
                        print(f"    - {name} @ {address}:{port}")
                    
                    # Utiliser le premier service trouv√© si pas de broker sp√©cifi√©
                    if not self.mqtt_broker:
                        self.mqtt_broker = services[0][2]  # Adresse IP
                    
                    self.results['mdns'] = True
                    return True
                else:
                    print(f"  {Colors.YELLOW}‚ö†Ô∏è{Colors.END} Aucun service MQTT trouv√© via mDNS")
            else:
                print(f"  {Colors.RED}‚ùå{Colors.END} Erreur avahi-browse ou aucun service")
        
        except FileNotFoundError:
            print(f"  {Colors.YELLOW}‚ö†Ô∏è{Colors.END} avahi-browse non disponible")
        except subprocess.TimeoutExpired:
            print(f"  {Colors.RED}‚ùå{Colors.END} Timeout lors de la recherche mDNS")
        except Exception as e:
            print(f"  {Colors.RED}‚ùå{Colors.END} Erreur: {e}")
        
        self.results['mdns'] = False
        return False
    
    def test_mqtt_connectivity(self) -> bool:
        """Test de connectivit√© MQTT"""
        print(f"{Colors.CYAN}üì° Test de connectivit√© MQTT...{Colors.END}")
        
        if not self.mqtt_broker:
            print(f"  {Colors.YELLOW}‚ö†Ô∏è{Colors.END} Pas de broker MQTT sp√©cifi√©")
            self.results['mqtt'] = False
            return False
        
        try:
            # Test de connexion TCP au port MQTT
            sock = socket.create_connection((self.mqtt_broker, 1883), timeout=5)
            sock.close()
            print(f"  {Colors.GREEN}‚úÖ{Colors.END} Connexion TCP au broker {self.mqtt_broker}:1883")
            
            # Test avec mosquitto_pub si disponible
            try:
                result = subprocess.run(
                    ['mosquitto_pub', '-h', self.mqtt_broker, '-t', '/test/validation', 
                     '-m', f'Test validation {datetime.now()}', '-q', '0'],
                    capture_output=True, text=True, timeout=10
                )
                
                if result.returncode == 0:
                    print(f"  {Colors.GREEN}‚úÖ{Colors.END} Publication MQTT test r√©ussie")
                    self.results['mqtt'] = True
                    return True
                else:
                    print(f"  {Colors.YELLOW}‚ö†Ô∏è{Colors.END} Publication MQTT √©chou√©e: {result.stderr}")
            
            except FileNotFoundError:
                print(f"  {Colors.YELLOW}‚ö†Ô∏è{Colors.END} mosquitto_pub non disponible, test TCP seul")
                self.results['mqtt'] = True
                return True
        
        except Exception as e:
            print(f"  {Colors.RED}‚ùå{Colors.END} Erreur connexion MQTT: {e}")
        
        self.results['mqtt'] = False
        return False
    
    def monitor_mqtt_messages(self, duration: int = 300) -> bool:
        """Surveille les messages MQTT pendant une dur√©e donn√©e"""
        print(f"{Colors.CYAN}üìä Surveillance MQTT pendant {duration}s...{Colors.END}")
        
        if not self.mqtt_broker:
            print(f"  {Colors.YELLOW}‚ö†Ô∏è{Colors.END} Pas de broker MQTT pour surveillance")
            return False
        
        try:
            # Utiliser mosquitto_sub pour √©couter
            process = subprocess.Popen(
                ['mosquitto_sub', '-h', self.mqtt_broker, '-t', self.mqtt_topic, '-v'],
                stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
            )
            
            messages_received = 0
            start_monitor = time.time()
            
            print(f"  √âcoute sur topic: {self.mqtt_topic}")
            print(f"  Appuyez sur Ctrl+C pour arr√™ter plus t√¥t")
            
            try:
                while time.time() - start_monitor < duration:
                    # V√©rifier s'il y a des donn√©es disponibles
                    process.poll()
                    if process.returncode is not None:
                        break
                    
                    # Lire ligne par ligne avec timeout
                    try:
                        line = process.stdout.readline()
                        if line:
                            messages_received += 1
                            timestamp = datetime.now().strftime('%H:%M:%S')
                            print(f"  [{timestamp}] Message {messages_received}: {line.strip()}")
                    except:
                        pass
                    
                    time.sleep(0.1)
            
            except KeyboardInterrupt:
                print(f"\n  {Colors.YELLOW}Surveillance interrompue par l'utilisateur{Colors.END}")
            
            finally:
                process.terminate()
                process.wait(timeout=5)
            
            elapsed = time.time() - start_monitor
            rate = messages_received / (elapsed / 60) if elapsed > 0 else 0
            
            print(f"\n  {Colors.GREEN}üìà{Colors.END} R√©sultats surveillance:")
            print(f"    Messages re√ßus: {messages_received}")
            print(f"    Dur√©e: {elapsed:.1f}s")
            print(f"    Taux: {rate:.2f} msg/min")
            
            # Crit√®res de validation
            success = messages_received > 0
            if success:
                print(f"  {Colors.GREEN}‚úÖ{Colors.END} Arduino communique correctement")
                
                # V√©rifications suppl√©mentaires
                if rate < 0.1:  # Moins d'1 message toutes les 10 minutes
                    print(f"  {Colors.YELLOW}‚ö†Ô∏è{Colors.END} Taux de publication faible")
                elif rate > 2:  # Plus de 2 messages par minute
                    print(f"  {Colors.YELLOW}‚ö†Ô∏è{Colors.END} Taux de publication √©lev√©")
                else:
                    print(f"  {Colors.GREEN}‚úÖ{Colors.END} Taux de publication optimal")
            else:
                print(f"  {Colors.RED}‚ùå{Colors.END} Aucun message re√ßu de l'Arduino")
            
            self.results['mqtt_monitoring'] = {
                'success': success,
                'messages_count': messages_received,
                'duration': elapsed,
                'rate_per_min': rate
            }
            
            return success
        
        except FileNotFoundError:
            print(f"  {Colors.RED}‚ùå{Colors.END} mosquitto_sub non disponible")
        except Exception as e:
            print(f"  {Colors.RED}‚ùå{Colors.END} Erreur surveillance: {e}")
        
        return False
    
    def test_production_config(self) -> bool:
        """V√©rifie la configuration de production"""
        print(f"{Colors.CYAN}‚öôÔ∏è V√©rification configuration production...{Colors.END}")
        
        config_file = "config.h"
        checks_passed = 0
        total_checks = 0
        
        try:
            with open(config_file, 'r') as f:
                content = f.read()
            
            checks = [
                ("DEBUG false", "DEBUG false" in content, "Debug d√©sactiv√©"),
                ("SEARCH_INTERVAL >= 60000", "60000" in content or "SEARCH_INTERVAL" in content, "Intervalle mDNS optimis√©"),
                ("PUBLISH_INTERVAL >= 300000", "300000" in content or "PUBLISH_INTERVAL" in content, "Intervalle publication optimis√©"),
                ("Service g√©n√©rique", '"mqtt"' in content, "Service mDNS g√©n√©rique")
            ]
            
            for check_name, condition, description in checks:
                total_checks += 1
                status = f"{Colors.GREEN}‚úÖ{Colors.END}" if condition else f"{Colors.RED}‚ùå{Colors.END}"
                print(f"  {status} {description}")
                if condition:
                    checks_passed += 1
            
            success = checks_passed == total_checks
            self.results['config'] = {'passed': checks_passed, 'total': total_checks}
            return success
        
        except FileNotFoundError:
            print(f"  {Colors.RED}‚ùå{Colors.END} Fichier {config_file} non trouv√©")
            return False
    
    def ping_test(self, target: str, count: int = 3) -> Tuple[bool, Optional[float]]:
        """Test ping vers une cible"""
        try:
            result = subprocess.run(
                ['ping', '-c', str(count), target],
                capture_output=True, text=True, timeout=10
            )
            
            if result.returncode == 0:
                # Extraire la latency moyenne
                lines = result.stdout.split('\n')
                for line in lines:
                    if 'avg' in line or 'mdev' in line:
                        try:
                            # Format: min/avg/max/mdev = x.x/x.x/x.x/x.x ms
                            parts = line.split('=')[1].strip().split('/')
                            avg_latency = float(parts[1])
                            return True, avg_latency
                        except:
                            pass
                return True, None
            
            return False, None
        
        except Exception:
            return False, None
    
    def get_gateway_ip(self) -> Optional[str]:
        """Obtient l'IP de la passerelle"""
        try:
            result = subprocess.run(
                ['ip', 'route', 'show', 'default'],
                capture_output=True, text=True
            )
            
            for line in result.stdout.split('\n'):
                if 'default via' in line:
                    return line.split()[2]
        except:
            pass
        
        return None
    
    def generate_report(self):
        """G√©n√®re un rapport de validation"""
        print(f"\n{Colors.BLUE}{Colors.BOLD}üìã RAPPORT DE VALIDATION PRODUCTION{Colors.END}")
        print("=" * 50)
        
        total_time = time.time() - self.start_time
        print(f"Dur√©e totale: {total_time:.1f}s")
        print(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # R√©sum√© des tests
        total_tests = len(self.results)
        passed_tests = sum(1 for result in self.results.values() 
                          if (isinstance(result, bool) and result) or 
                             (isinstance(result, dict) and result.get('success')))
        
        print(f"Tests r√©alis√©s: {total_tests}")
        print(f"Tests r√©ussis: {passed_tests}")
        print(f"Taux de r√©ussite: {(passed_tests/total_tests)*100:.1f}%")
        print()
        
        # D√©tails par test
        for test_name, result in self.results.items():
            if isinstance(result, bool):
                status = f"{Colors.GREEN}‚úÖ{Colors.END}" if result else f"{Colors.RED}‚ùå{Colors.END}"
                print(f"{status} {test_name.replace('_', ' ').title()}")
            elif isinstance(result, dict):
                if 'success' in result:
                    status = f"{Colors.GREEN}‚úÖ{Colors.END}" if result['success'] else f"{Colors.RED}‚ùå{Colors.END}"
                    print(f"{status} {test_name.replace('_', ' ').title()}")
                elif 'passed' in result and 'total' in result:
                    print(f"üìä {test_name.replace('_', ' ').title()}: {result['passed']}/{result['total']}")
        
        print()
        
        # Recommandations
        if passed_tests == total_tests:
            print(f"{Colors.GREEN}{Colors.BOLD}üéâ VALIDATION PRODUCTION R√âUSSIE!{Colors.END}")
            print("Le syst√®me Arduino est pr√™t pour la production.")
        elif passed_tests >= total_tests * 0.8:
            print(f"{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è VALIDATION PARTIELLEMENT R√âUSSIE{Colors.END}")
            print("Quelques ajustements sont recommand√©s avant mise en production.")
        else:
            print(f"{Colors.RED}{Colors.BOLD}‚ùå VALIDATION √âCHOU√âE{Colors.END}")
            print("Des probl√®mes critiques doivent √™tre r√©solus.")
        
        print()
        print("Pour plus d'informations, consultez TROUBLESHOOTING.md")

def main():
    parser = argparse.ArgumentParser(description="Validation de production Arduino mDNS MQTT")
    parser.add_argument('--broker', '-b', help='Adresse IP du broker MQTT')
    parser.add_argument('--topic', '-t', default='/arduino', help='Topic MQTT √† surveiller')
    parser.add_argument('--monitor-time', '-m', type=int, default=300, 
                       help='Dur√©e de surveillance MQTT en secondes (default: 300)')
    parser.add_argument('--no-monitor', action='store_true',
                       help='Ignorer la surveillance MQTT')
    
    args = parser.parse_args()
    
    # Gestion des signaux
    def signal_handler(sig, frame):
        print(f"\n{Colors.YELLOW}Validation interrompue par signal{Colors.END}")
        sys.exit(130)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # Cr√©er et ex√©cuter le validateur
    validator = ProductionValidator(mqtt_broker=args.broker, mqtt_topic=args.topic)
    
    validator.print_header()
    
    # S√©quence de tests
    tests = [
        ("Connectivit√© r√©seau", validator.test_network_connectivity),
        ("Services mDNS", validator.test_mdns_services),
        ("Connectivit√© MQTT", validator.test_mqtt_connectivity),
        ("Configuration production", validator.test_production_config)
    ]
    
    # Ex√©cuter les tests de base
    for test_name, test_func in tests:
        print(f"\n{Colors.MAGENTA}üß™ {test_name}...{Colors.END}")
        try:
            test_func()
        except Exception as e:
            print(f"{Colors.RED}‚ùå Erreur dans {test_name}: {e}{Colors.END}")
            validator.results[test_name.lower().replace(' ', '_')] = False
    
    # Surveillance MQTT si demand√©e
    if not args.no_monitor:
        print(f"\n{Colors.MAGENTA}üß™ Surveillance MQTT...{Colors.END}")
        try:
            validator.monitor_mqtt_messages(args.monitor_time)
        except Exception as e:
            print(f"{Colors.RED}‚ùå Erreur surveillance MQTT: {e}{Colors.END}")
    
    # G√©n√©rer le rapport final
    validator.generate_report()

if __name__ == "__main__":
    main()
